// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 16-bits given are read right to left (Israel convention)
    
    // A instruction if 0
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outToA);

    //Save in A-register if A instruction or dest. (d1) is 1
    Not(in=instruction[15], out=loadABit);
    Or(a=loadABit, b=instruction[5], out=loadA);
    ARegister(in=outToA, load=loadA, out=outAReg, out[0..14]=addressM);
    
    // using either A or M, instruction[12] = a-bit, if a==1 then M
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=outMOrA);

    // Save in D-register if D instruction and dest. (d2) is 1
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outDReg);

    // If C-instruction and d3, i.e. saved in RAM[A]
    And(a=instruction[15], b=instruction[3], out=writeM);

    ALU(x=outDReg, y=outMOrA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zero, ng=neg);
    
    /*
    * “zr” and “ng” 
    * Role is to say something about the main output.
    * If out == 0 then zr = 1, else zr = 0
    * If out < 0 then ng = 1, else ng = 0
    */      

    // Decide if jump
    // Check if positive number, i.e. both neg and zero are 0
    Or(a=zero, b=neg, out=notpos);
    Not(in=notpos, out=pos);

    // Check jump conditions, j1, j2, j3
    And(a=instruction[0], b=pos, out=jmp1);
    And(a=instruction[1], b=zero, out=jmp2);
    And(a=instruction[2], b=neg, out=jmp3);
    Or(a=jmp1, b=jmp2, out=jmpor1);
    Or(a=jmpor1, b=jmp3, out=jmpor2);
    // To jump, it must also be C-instruction
    And(a=instruction[15], b=jmpor2, out=jump);

    PC(in=outAReg, load=jump, inc=true, reset=reset, out[0..14]=pc);
}